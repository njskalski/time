initSidebarItems({"enum":[["Error","A unified error type for anything returned by a method in the time crate."],["ParseError","An error ocurred while parsing."],["Sign","Contains the sign of a value: positive, negative, or zero."],["Weekday","Days of the week."]],"fn":[["days_in_year","Get the number of calendar days in a given year."],["is_leap_year","Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses astronomical year numbering."],["precise_time_ns",""],["precise_time_s",""],["weeks_in_year","Get the number of weeks in the ISO year."]],"mod":[["prelude","A collection of traits that are widely useful. Unlike the standard library, this must be explicitly imported:"]],"struct":[["ComponentRangeError","An error type indicating that a component provided to a method was out of range, causing a failure."],["ConversionRangeError","An error type indicating that a conversion failed because the target type could not store the initial value."],["Date","Calendar date."],["Duration","A span of time with nanosecond precision."],["Instant","A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`]."],["OffsetDateTime","A [`PrimitiveDateTime`] with a [`UtcOffset`]."],["PrimitiveDateTime","Combined date and time."],["Time","The clock time within a given date. Nanosecond precision."],["UtcOffset","An offset from UTC."]],"trait":[["NumericalDuration","Create `Duration`s from primitive and core numeric types."],["NumericalStdDuration","Create `std::time::Duration`s from primitive and core numeric types."],["NumericalStdDurationShort","Create `std::time::Duration`s from primitive and core numeric types. Unless you are always expecting a `std::time::Duration`, you should prefer to use [`NumericalStdDuration`] for clarity."]],"type":[["PreciseTime",""],["SteadyTime",""]]});